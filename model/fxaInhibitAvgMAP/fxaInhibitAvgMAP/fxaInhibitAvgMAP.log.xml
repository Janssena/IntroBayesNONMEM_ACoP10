<log>
 <logged on="run">
  <config>
   <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
   <alias id="folder">/mnt/nm743CD</alias>
   <alias id="target">/opt/NONMEM/nm74</alias>
   <alias id="origin">/mnt/nmqual-8.4.0</alias>
   <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
   <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
   <!--The meta interface groups commands that collect metadata.-->
   <do on="meta">pwd</do>
   <do on="meta">date</do>
   <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
   <do on="meta">echo $SHELL</do>
   <do on="meta">echo $USER</do>
   <do on="meta">echo $PATH</do>
   <do on="meta">head -n 5 target/util/nmfe74</do>
   <do on="meta">which ifort</do>
   <!--The 'install' interface installs NONMEM.-->
   <do on="install">date</do>
   <do on="install">rm -rf origin/temp</do>
   <do on="install">mkdir origin/temp</do>
   <do on="install">cp -r folder/* origin/temp</do>
   <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
   <!--alters compile options in setup73-->
   <do on="install">rm -rf target</do>
   <do on="install">mkdir target</do>
   <do on="install" in="origin/temp">pwd</do>
   <do on="install" in="origin/temp">ifort --version</do>
   <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target ifort y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
   <do on="install">mkdir target/nmqual</do>
   <do on="install">mkdir target/nmqual/doc</do>
   <do on="install">cp $0 target/nmqual</do>
   <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
   <do on="install">cp -r origin/con target/nmqual</do>
   <!--support for processing xml docs-->
   <do on="install">cp -r origin/csv target/nmqual</do>
   <!--support for processing csv docs-->
   <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
   <!--reference modeling results-->
   <do on="install">cp -r origin/psn target/nmqual</do>
   <!--support for psn qualification-->
   <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
   <!--keep for archival purposes-->
   <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
   <!--keep for archival purposes-->
   <do on="install">rm -rf origin/temp</do>
   <do on="install">cp -r origin/test target/nmqual</do>
   <!--supports control tests-->
   <do on="install">chmod 0777 target/license/nonmem.lic</do>
   <!--enable overwriting-->
   <do on="install">cp unlock target/license/nonmem.lic</do>
   <!--replace expired license-->
   <do on="install">cp mpicha target/mpi/mpi_lini</do>
   <!--replace default mpich archive-->
   <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
   <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
   <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
   <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74.diff</do>
   <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74.diff</do>
   <do on="install" as="xml">perl $0 $_0 meta</do>
   <to on="install">target/nmqual/log.xml</to>
   <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
   <!--Run directory and run name are required arguments.-->
   <do on="basic" as="xml">perl $0 $_0 meta</do>
   <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
   <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="basic" as="xml">cat target/nmqual/log.xml</do>
   <to on="basic">$_1/$_2.log.xml</to>
   <!--The 'run' interface expects a leading compile/execute argument.-->
   <do on="run" as="xml">perl $0 $_0 meta</do>
   <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
   <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="run" as="xml">cat target/nmqual/log.xml</do>
   <to on="run">$_2/$_3.log.xml</to>
   <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
   <do on="para" as="xml">perl $0 $_0 meta</do>
   <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
   <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="para" as="xml">cat target/nmqual/log.xml</do>
   <to on="para">$_2/$_3.log.xml</to>
   <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
   <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
   <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
   <!--The 'qualify' interface runs a full suite of qualification tests.-->
   <do on="qualify" as="xml">perl $0 $_0 meta</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
   <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
   <to on="qualify">$_1</to>
   <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
   <do on="regress" as="xml">perl $0 $_0 meta</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
   <do on="regress" as="xml">cat target/nmqual/log.xml</do>
   <to on="regress">$_1</to>
   <!--The 'psntest' interface runs PsN control tests.-->
   <do on="psntest" as="xml">perl $0 $_0 meta</do>
   <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
   <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
   <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
   <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
   <to on="psntest">$_1</to>
   <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
   <do on="accept">echo $_</do>
   <to on="accept">$0</to>
  </config>
  <job>
   <do>perl /opt/NONMEM/nm74/nmqual/autolog.pl /opt/NONMEM/nm74/nmqual/log.xml meta</do>
   <so>
    <log>
     <logged on="meta">
      <config>
       <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
       <alias id="folder">/mnt/nm743CD</alias>
       <alias id="target">/opt/NONMEM/nm74</alias>
       <alias id="origin">/mnt/nmqual-8.4.0</alias>
       <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
       <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
       <!--The meta interface groups commands that collect metadata.-->
       <do on="meta">pwd</do>
       <do on="meta">date</do>
       <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
       <do on="meta">echo $SHELL</do>
       <do on="meta">echo $USER</do>
       <do on="meta">echo $PATH</do>
       <do on="meta">head -n 5 target/util/nmfe74</do>
       <do on="meta">which ifort</do>
       <!--The 'install' interface installs NONMEM.-->
       <do on="install">date</do>
       <do on="install">rm -rf origin/temp</do>
       <do on="install">mkdir origin/temp</do>
       <do on="install">cp -r folder/* origin/temp</do>
       <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
       <!--alters compile options in setup73-->
       <do on="install">rm -rf target</do>
       <do on="install">mkdir target</do>
       <do on="install" in="origin/temp">pwd</do>
       <do on="install" in="origin/temp">ifort --version</do>
       <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target ifort y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
       <do on="install">mkdir target/nmqual</do>
       <do on="install">mkdir target/nmqual/doc</do>
       <do on="install">cp $0 target/nmqual</do>
       <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
       <do on="install">cp -r origin/con target/nmqual</do>
       <!--support for processing xml docs-->
       <do on="install">cp -r origin/csv target/nmqual</do>
       <!--support for processing csv docs-->
       <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
       <!--reference modeling results-->
       <do on="install">cp -r origin/psn target/nmqual</do>
       <!--support for psn qualification-->
       <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">rm -rf origin/temp</do>
       <do on="install">cp -r origin/test target/nmqual</do>
       <!--supports control tests-->
       <do on="install">chmod 0777 target/license/nonmem.lic</do>
       <!--enable overwriting-->
       <do on="install">cp unlock target/license/nonmem.lic</do>
       <!--replace expired license-->
       <do on="install">cp mpicha target/mpi/mpi_lini</do>
       <!--replace default mpich archive-->
       <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
       <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
       <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
       <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74.diff</do>
       <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74.diff</do>
       <do on="install" as="xml">perl $0 $_0 meta</do>
       <to on="install">target/nmqual/log.xml</to>
       <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
       <!--Run directory and run name are required arguments.-->
       <do on="basic" as="xml">perl $0 $_0 meta</do>
       <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
       <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="basic" as="xml">cat target/nmqual/log.xml</do>
       <to on="basic">$_1/$_2.log.xml</to>
       <!--The 'run' interface expects a leading compile/execute argument.-->
       <do on="run" as="xml">perl $0 $_0 meta</do>
       <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
       <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="run" as="xml">cat target/nmqual/log.xml</do>
       <to on="run">$_2/$_3.log.xml</to>
       <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
       <do on="para" as="xml">perl $0 $_0 meta</do>
       <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
       <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="para" as="xml">cat target/nmqual/log.xml</do>
       <to on="para">$_2/$_3.log.xml</to>
       <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
       <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
       <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
       <!--The 'qualify' interface runs a full suite of qualification tests.-->
       <do on="qualify" as="xml">perl $0 $_0 meta</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
       <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
       <to on="qualify">$_1</to>
       <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
       <do on="regress" as="xml">perl $0 $_0 meta</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="regress" as="xml">cat target/nmqual/log.xml</do>
       <to on="regress">$_1</to>
       <!--The 'psntest' interface runs PsN control tests.-->
       <do on="psntest" as="xml">perl $0 $_0 meta</do>
       <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
       <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
       <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
       <to on="psntest">$_1</to>
       <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
       <do on="accept">echo $_</do>
       <to on="accept">$0</to>
      </config>
      <job>
       <do>pwd</do>
       <so>/data/IntroBayesNONMEM/script</so>
      </job>
      <job>
       <do>date</do>
       <so>Fri Aug 23 20:52:43 UTC 2019</so>
      </job>
      <job>
       <do>perl -e 'use POSIX; print join qq(,),uname'</do>
       <so>Linux,ip-172-16-2-230,3.13.0-93-generic,#140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016,x86_64</so>
      </job>
      <job>
       <do>echo $SHELL</do>
       <so>/bin/bash</so>
      </job>
      <job>
       <do>echo $USER</do>
       <so>billg</so>
      </job>
      <job>
       <do>echo $PATH</do>
       <so>/usr/local/mpich3/bin:/usr/local/mpich3gf/bin:/opt/intel/bin/intel64:/opt/intel/mpirt/bin/intel64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/sge/bin/lx-amd64:/usr/local/texlive/2013/bin/x86_64-linux</so>
      </job>
      <job>
       <do>head -n 5 /opt/NONMEM/nm74/util/nmfe74</do>
       <so>#!/bin/bash
          dir=/opt/NONMEM/nm74
          f=ifort
          o=' -fp-model strict -Gs -nologo -nbs -w '
          opstat=' -static '</so>
      </job>
      <job>
       <do>which ifort</do>
       <so>/opt/intel/bin/intel64/ifort</so>
      </job>
     </logged>
    </log>
   </so>
  </job>
  <job>
   <do in="/data/IntroBayesNONMEM/model/fxaInhibitAvgMAP/fxaInhibitAvgMAP">/opt/NONMEM/nm74/util/nmfe74 ce fxaInhibitAvgMAP.ctl fxaInhibitAvgMAP.lst</do>
   <so>Starting NMTRAN
     
    WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
                
    (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
                
    (WARNING  97) A RANDOM QUANTITY IS RAISED TO A POWER. IF THE RESULT AFFECTS
    THE VALUE OF THE OBJECTIVE FUNCTION, THE USER SHOULD ENSURE THAT THE
    RANDOM QUANTITY IS NEVER 0 WHEN THE POWER IS &lt; 1.
                
    (WARNING  99) A RANDOM QUANTITY IS USED AS A POWER. IF THE RESULT AFFECTS
    THE VALUE OF THE OBJECTIVE FUNCTION, THE USER SHOULD ENSURE THAT THE
    QUANTITY RAISED TO THE POWER IS NOT 0.
                
    (WARNING  13) WITH USER-WRITTEN PRED OR $PRED, NM-TRAN CANNOT APPEND THE
    MDV DATA ITEM.
   Recompiling certain components
   Building NONMEM Executable
   Starting nonmem execution ...
   License Registered to: Metrum Research Group
   Expiration Date:    14 JUL 2020
   Current Date:       23 AUG 2019
   Days until program expires : 326
    
    
    First Order
    MONITORING OF SEARCH:
   
    
   0ITERATION NO.:    0    OBJECTIVE VALUE:   407.079855908670        NO. OF FUNC. EVALS.:   5
    CUMULATIVE NO. OF FUNC. EVALS.:        5
    NPARAMETR:  2.1918E+00  4.8325E+00 -3.6482E-01  1.8589E+00
    PARAMETER:  1.0000E-01  1.0000E-01 -1.0000E-01  1.0000E-01
    GRADIENT:  -1.6637E+02 -8.5930E+02 -7.1572E+02 -9.1334E+02
    
   0ITERATION NO.:   20    OBJECTIVE VALUE:   367.831903133985        NO. OF FUNC. EVALS.: 125
    CUMULATIVE NO. OF FUNC. EVALS.:      130
    NPARAMETR:  1.7133E+00  4.6313E+00  5.8694E-02  1.7807E+00
    PARAMETER:  7.8168E-02  9.5836E-02  1.6088E-02  9.5790E-02
    GRADIENT:  -2.1890E-02 -3.4106E-02 -2.8509E-02  9.8401E-02
    Elapsed estimation  time in seconds:     0.06
    Elapsed postprocess time in seconds:     0.00
    Elapsed finaloutput time in seconds:     0.01
   Done with nonmem execution</so>
  </job>
  <job>
   <do in="/data/IntroBayesNONMEM/model/fxaInhibitAvgMAP/fxaInhibitAvgMAP">if [ -e fxaInhibitAvgMAP.xml ];then cat fxaInhibitAvgMAP.xml;else echo \&lt;nofile/\>; fi</do>
   <so>
    <nm:output xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:nm="http://namespaces.oreilly.com/xmlnut/address" xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address output.xsd">
     <nm:start_datetime>2019-08-23T20:52:44.854</nm:start_datetime>
     <nm:control_stream>
     $PROB fxaInhibitAvgMAP example, Emax model
     $INPUT C ID DOSE DV CONC EVID CMT
     
     $DATA ../../../data/fxaInhAvg.csv     IGNORE=(C='C')
     
     $PRED
     
     MU_1 = THETA(1)
     MU_2 = THETA(2)
     MU_3 = THETA(3)
     MU_4 = THETA(4)
     
     LGT_EMAX = MU_1 + ETA(1)
     
     EMAX = 100 / (1 + EXP(-LGT_EMAX))
     EC50 = EXP(MU_2 + ETA(2))
     GAMMA = EXP(MU_3 + ETA(3))
     SD = EXP(MU_4 + ETA(4))
     
     RESP = EMAX * CONC**GAMMA / (EC50**GAMMA + CONC**GAMMA)
     
     Y = RESP + SD * ERR(1)
     
     ; Initial values of THETA
     $THETA
     2.19184207890814      ; EMAX = 100 * EXPIT(THETA(1))
     4.83251007191548  ; EC50 = EXP(THETA(2))
     -0.364821245396368    ; GAMMA = EXP(THETA(3))
     1.85891572682141   ; SD = (THETA(4))
     $OMEGA DIAG(4);INITIAL values of OMEGAs
     (0 FIX)
     (0 FIX)
     (0 FIX)
     (0 FIX)
     $SIGMA ;INITIAL values of SIGMAs
     (1 FIX)
     
     
     $PRIOR NWPRI
     $THETAP          ; Prior information of THETAS
     (0 FIX)      ;  THETA(1) EMAX
     (5.5 FIX)      ;  THETA(2) EC50
     (0.75 FIX)      ;  THETA(3) gamma
     (2.3 FIX)      ; THETA(4) SD
     $THETAPV BLOCK(4)     ;  variances for priors on THETAS (var-cov)
     2.0 FIX ; EMAX almost uniform
     0.00 1  ; EC50
     0.00 0.00 0.50  ; gamma
     0.00 0.00 0.00 1   ; SD
     $ESTIMATION
     METHOD = 0
     AUTO= 1
     OLKJDF= 1
     OVARF= -1
     PRINT = 100 NOABORT
     
     SIGL = 12
     SIG = 4
     MAXEVAL = 99999999
     $TABLE ID EVID CONC DV PRED
     NOPRINT ONEHEADER FILE=./fxaInhibitAvgMAP.tab
     $TABLE ID EMAX EC50 GAMMA SD
     NOPRINT ONEHEADER FILE=./fxaInhibitAvgMAPpar.tab</nm:control_stream>
     <nm:nmtran>
     
      WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
     
      (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
     
      (WARNING  97) A RANDOM QUANTITY IS RAISED TO A POWER. IF THE RESULT AFFECTS
      THE VALUE OF THE OBJECTIVE FUNCTION, THE USER SHOULD ENSURE THAT THE
      RANDOM QUANTITY IS NEVER 0 WHEN THE POWER IS &lt; 1.
     
      (WARNING  99) A RANDOM QUANTITY IS USED AS A POWER. IF THE RESULT AFFECTS
      THE VALUE OF THE OBJECTIVE FUNCTION, THE USER SHOULD ENSURE THAT THE
      QUANTITY RAISED TO THE POWER IS NOT 0.
     
      (WARNING  13) WITH USER-WRITTEN PRED OR $PRED, NM-TRAN CANNOT APPEND THE
      MDV DATA ITEM.</nm:nmtran>
     <nm:nonmem nm:version="7.4.3">
      <nm:license_information>
      License Registered to: Metrum Research Group
      Expiration Date:    14 JUL 2020
      Current Date:       23 AUG 2019
      Days until program expires : 326</nm:license_information>
      <nm:program_information>
      1NONLINEAR MIXED EFFECTS MODEL PROGRAM (NONMEM) VERSION 7.4.3
       ORIGINALLY DEVELOPED BY STUART BEAL, LEWIS SHEINER, AND ALISON BOECKMANN
       CURRENT DEVELOPERS ARE ROBERT BAUER, ICON DEVELOPMENT SOLUTIONS,
       AND ALISON BOECKMANN. IMPLEMENTATION, EFFICIENCY, AND STANDARDIZATION
       PERFORMED BY NOUS INFOSYSTEMS.</nm:program_information>
      <nm:theta_lb>
       <nm:val nm:name="1">-1000000.00000000</nm:val>
       <nm:val nm:name="2">-1000000.00000000</nm:val>
       <nm:val nm:name="3">-1000000.00000000</nm:val>
       <nm:val nm:name="4">-1000000.00000000</nm:val>
       <nm:val nm:name="5">0.000000000000000E+000</nm:val>
       <nm:val nm:name="6">5.50000000000000</nm:val>
       <nm:val nm:name="7">0.750000000000000</nm:val>
       <nm:val nm:name="8">2.30000000000000</nm:val>
      </nm:theta_lb>
      <nm:theta_in>
       <nm:val nm:name="1">2.19184207890814</nm:val>
       <nm:val nm:name="2">4.83251007191548</nm:val>
       <nm:val nm:name="3">-0.364821245396368</nm:val>
       <nm:val nm:name="4">1.85891572682141</nm:val>
       <nm:val nm:name="5">0.000000000000000E+000</nm:val>
       <nm:val nm:name="6">5.50000000000000</nm:val>
       <nm:val nm:name="7">0.750000000000000</nm:val>
       <nm:val nm:name="8">2.30000000000000</nm:val>
      </nm:theta_in>
      <nm:theta_ub>
       <nm:val nm:name="1">1000000.00000000</nm:val>
       <nm:val nm:name="2">1000000.00000000</nm:val>
       <nm:val nm:name="3">1000000.00000000</nm:val>
       <nm:val nm:name="4">1000000.00000000</nm:val>
       <nm:val nm:name="5">0.000000000000000E+000</nm:val>
       <nm:val nm:name="6">5.50000000000000</nm:val>
       <nm:val nm:name="7">0.750000000000000</nm:val>
       <nm:val nm:name="8">2.30000000000000</nm:val>
      </nm:theta_ub>
      <nm:problem nm:number="1" nm:subproblem="0" nm:superproblem1="0" nm:iteration1="0" nm:superproblem2="0" nm:iteration2="0">
       <nm:problem_title>fxaInhibitAvgMAP example, Emax model</nm:problem_title>
       <nm:problem_information>
       
        PROBLEM NO.:         1
        fxaInhibitAvgMAP example, Emax model
       0DATA CHECKOUT RUN:              NO
        DATA SET LOCATED ON UNIT NO.:    2
        THIS UNIT TO BE REWOUND:        NO
        NO. OF DATA RECS IN DATA SET:       80
        NO. OF DATA ITEMS IN DATA SET:   7
        ID DATA ITEM IS DATA ITEM NO.:   2
        DEP VARIABLE IS DATA ITEM NO.:   4
       0LABELS FOR DATA ITEMS:
        C ID DOSE DV CONC EVID CMT
       0(NONBLANK) LABELS FOR PRED-DEFINED ITEMS:
        EMAX EC50 GAMMA SD
       0FORMAT FOR DATA:
        (7E6.0)
       
        TOT. NO. OF OBS RECS:       80
        TOT. NO. OF INDIVIDUALS:       80
       0LENGTH OF THETA:   8
       0DEFAULT THETA BOUNDARY TEST OMITTED:    NO
       0OMEGA HAS BLOCK FORM:
         1
         0  2
         0  0  3
         0  0  0  4
         0  0  0  0  5
         0  0  0  0  5  5
         0  0  0  0  5  5  5
         0  0  0  0  5  5  5  5
       0DEFAULT OMEGA BOUNDARY TEST OMITTED:    NO
       0SIGMA HAS SIMPLE DIAGONAL FORM WITH DIMENSION:   1
       0DEFAULT SIGMA BOUNDARY TEST OMITTED:    NO
       0INITIAL ESTIMATE OF THETA:
        LOWER BOUND    INITIAL EST    UPPER BOUND
        -0.1000E+07     0.2192E+01     0.1000E+07
        -0.1000E+07     0.4833E+01     0.1000E+07
        -0.1000E+07    -0.3648E+00     0.1000E+07
        -0.1000E+07     0.1859E+01     0.1000E+07
         0.0000E+00     0.0000E+00     0.0000E+00
         0.5500E+01     0.5500E+01     0.5500E+01
         0.7500E+00     0.7500E+00     0.7500E+00
         0.2300E+01     0.2300E+01     0.2300E+01
       0INITIAL ESTIMATE OF OMEGA:
        BLOCK SET NO.   BLOCK                                                                    FIXED
               1                                                                                  YES
                         0.0000E+00
               2                                                                                  YES
                         0.0000E+00
               3                                                                                  YES
                         0.0000E+00
               4                                                                                  YES
                         0.0000E+00
               5                                                                                  YES
                         0.2000E+01
                         0.0000E+00   0.1000E+01
                         0.0000E+00   0.0000E+00   0.5000E+00
                         0.0000E+00   0.0000E+00   0.0000E+00   0.1000E+01
       0INITIAL ESTIMATE OF SIGMA:
        0.1000E+01
       0SIGMA CONSTRAINED TO BE THIS INITIAL ESTIMATE
       0TABLES STEP OMITTED:    NO
        NO. OF TABLES:           2
        SEED NUMBER (SEED):    11456
        RANMETHOD:             3U
        MC SAMPLES (ESAMPLE):    300
        WRES SQUARE ROOT TYPE (WRESCHOL): EIGENVALUE
       0-- TABLE   1 --
       0RECORDS ONLY:    ALL
       04 COLUMNS APPENDED:    YES
        PRINTED:                NO
        HEADER:                YES
        FILE TO BE FORWARDED:   NO
        FORMAT:                S1PE11.4
        LFORMAT:
        RFORMAT:
        FIXED_EFFECT_ETAS:
       0USER-CHOSEN ITEMS:
        ID EVID CONC DV
       0-- TABLE   2 --
       0RECORDS ONLY:    ALL
       04 COLUMNS APPENDED:    YES
        PRINTED:                NO
        HEADER:                YES
        FILE TO BE FORWARDED:   NO
        FORMAT:                S1PE11.4
        LFORMAT:
        RFORMAT:
        FIXED_EFFECT_ETAS:
       0USER-CHOSEN ITEMS:
        ID EMAX EC50 GAMMA SD
       0
        PRIOR SUBROUTINE USER-SUPPLIED</nm:problem_information>
       <nm:problem_options nm:data_checkout_run="no" nm:data_unit="2" nm:data_rewind="no" nm:data_nrec="80" nm:data_nitems="7" nm:data_id="2" nm:data_l2="0" nm:data_dv="4" nm:data_mdv="0" nm:data_mrg="0" nm:data_raw="0" nm:data_rpt="0" nm:data_sub_array1="0" nm:data_sub_array2="0" nm:data_sub_array3="0" nm:data_format="(7e6.0)" nm:data_nobs="80" nm:data_nind="80" nm:data_mdv100="0" nm:nthetat="8" nm:theta_bound_test_omitted="no" nm:omega_blockdim="8" nm:omega_bound_test_omitted="no" nm:sigma_diagdim="1" nm:sigma_bound_test_omitted="no" nm:tab_omitted="no" nm:tab_number="2" nm:tab_seed="11456" nm:tab_ranmethod="3u" nm:tab_esample="300" nm:tab_wres="eigenvalue" nm:tab_fixedetas_01="BLANK" nm:tab_fixedetas_02="BLANK"/>
       <nm:estimation nm:number="1" nm:type="0">
        <nm:table_series>1</nm:table_series>
        <nm:estimation_method>fo</nm:estimation_method>
        <nm:estimation_title>First Order</nm:estimation_title>
        <nm:estimation_information>
         ESTIMATION STEP OMITTED:                 NO
         ANALYSIS TYPE:                           POPULATION
         NUMBER OF SADDLE POINT RESET ITERATIONS:      0
         GRADIENT METHOD USED:               NOSLOW
         EPS-ETA INTERACTION:                     NO
         NO. OF FUNCT. EVALS. ALLOWED:            99999999
         NO. OF SIG. FIGURES REQUIRED:            4
         INTERMEDIATE PRINTOUT:                   YES
         ESTIMATE OUTPUT TO MSF:                  NO
         ABORT WITH PRED EXIT CODE 1:             NO
         IND. OBJ. FUNC. VALUES SORTED:           NO
         NUMERICAL DERIVATIVE
               FILE REQUEST (NUMDER):               NONE
         MAP (ETAHAT) ESTIMATION METHOD (OPTMAP):   0
         ETA HESSIAN EVALUATION METHOD (ETADER):    0
         INITIAL ETA FOR MAP ESTIMATION (MCETA):    0
         SIGDIGITS FOR MAP ESTIMATION (SIGLO):      12
         GRADIENT SIGDIGITS OF
               FIXED EFFECTS PARAMETERS (SIGL):     12
         NOPRIOR SETTING (NOPRIOR):                 OFF
         NOCOV SETTING (NOCOV):                     OFF
         DERCONT SETTING (DERCONT):                 OFF
         FINAL ETA RE-EVALUATION (FNLETA):          ON
         EXCLUDE NON-INFLUENTIAL (NON-INFL.) ETAS
               IN SHRINKAGE (ETASTYPE):             NO
         NON-INFL. ETA CORRECTION (NONINFETA):      OFF
         RAW OUTPUT FILE (FILE): fxaInhibitAvgMAP.ext
         EXCLUDE TITLE (NOTITLE):                   NO
         EXCLUDE COLUMN LABELS (NOLABEL):           NO
         FORMAT FOR ADDITIONAL FILES (FORMAT):      S1PE12.5
         PARAMETER ORDER FOR OUTPUTS (ORDER):       TSOL
         WISHART PRIOR DF INTERPRETATION (WISHTYPE):0
         KNUTHSUMOFF:                               0
         INCLUDE LNTWOPI:                           NO
         INCLUDE CONSTANT TERM TO PRIOR (PRIORC):   NO
         INCLUDE CONSTANT TERM TO OMEGA (ETA) (OLNTWOPI):NO
         ADDITIONAL CONVERGENCE TEST (CTYPE=4)?:    NO
         EM OR BAYESIAN METHOD USED:                 NONE
        </nm:estimation_information>
        <nm:estimation_options nm:estim_omitted="no" nm:analysis_type="pop" nm:saddle_reset="0" nm:saddle_hess="0" nm:slow_gradient="noslow" nm:epseta_interaction="no" nm:predflag="0" nm:maxfn="99999999" nm:nsig="4" nm:msfo="no" nm:abort="no" nm:objsort="no" nm:numder="0" nm:optmap="0" nm:etader="0" nm:mceta="0" nm:siglo="12" nm:sigl="12" nm:noprior="0" nm:nocov="0" nm:dercont="0" nm:atol="0" nm:fnleta="1" nm:etastype="0" nm:noninfeta="0" nm:file="fxainhibitavgmap.ext" nm:notitle="0" nm:nolabel="0" nm:format="s1pe12.5" nm:order="tsol" nm:wishtype="0" nm:knuthsumoff="0" nm:lntwopi="0" nm:priorc="0" nm:olntwopi="0" nm:ctype="0"/>
        <nm:monitor>
         <nm:obj nm:iteration="0">407.079855908670</nm:obj>
         <nm:obj nm:iteration="20">367.831903133985</nm:obj>
        </nm:monitor>
        <nm:termination_status>0</nm:termination_status>
        <nm:termination_nfuncevals>130</nm:termination_nfuncevals>
        <nm:termination_sigdigits>4.76190271170834</nm:termination_sigdigits>
        <nm:termination_information>
        0MINIMIZATION SUCCESSFUL
         NO. OF FUNCTION EVALUATIONS USED:      130
         NO. OF SIG. DIGITS IN FINAL EST.:  4.8</nm:termination_information>
        <nm:termination_txtmsg>
         <nm:val nm:name="1">37</nm:val>
        </nm:termination_txtmsg>
        <nm:estimation_elapsed_time>0.06</nm:estimation_elapsed_time>
        <nm:final_objective_function_text>MINIMUM VALUE OF OBJECTIVE FUNCTION</nm:final_objective_function_text>
        <nm:final_objective_function>367.831903133985</nm:final_objective_function>
        <nm:theta>
         <nm:val nm:name="1">1.71332267428894</nm:val>
         <nm:val nm:name="2">4.63127865392534</nm:val>
         <nm:val nm:name="3">5.869383740541853E-002</nm:val>
         <nm:val nm:name="4">1.78066222034444</nm:val>
        </nm:theta>
        <nm:omega>
         <nm:row nm:rname="1">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
         </nm:row>
         <nm:row nm:rname="2">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="2">0.000000000000000E+000</nm:col>
         </nm:row>
         <nm:row nm:rname="3">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="2">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="3">0.000000000000000E+000</nm:col>
         </nm:row>
         <nm:row nm:rname="4">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="2">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="3">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="4">0.000000000000000E+000</nm:col>
         </nm:row>
        </nm:omega>
        <nm:sigma>
         <nm:row nm:rname="1">
          <nm:col nm:cname="1">1.00000000000000</nm:col>
         </nm:row>
        </nm:sigma>
        <nm:omegac>
         <nm:row nm:rname="1">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
         </nm:row>
         <nm:row nm:rname="2">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="2">0.000000000000000E+000</nm:col>
         </nm:row>
         <nm:row nm:rname="3">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="2">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="3">0.000000000000000E+000</nm:col>
         </nm:row>
         <nm:row nm:rname="4">
          <nm:col nm:cname="1">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="2">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="3">0.000000000000000E+000</nm:col>
          <nm:col nm:cname="4">0.000000000000000E+000</nm:col>
         </nm:row>
        </nm:omegac>
        <nm:sigmac>
         <nm:row nm:rname="1">
          <nm:col nm:cname="1">1.00000000000000</nm:col>
         </nm:row>
        </nm:sigmac>
       </nm:estimation>
       <nm:post_process_times>
        <nm:post_elapsed_time>0.00</nm:post_elapsed_time>
        <nm:finaloutput_elapsed_time>0.01</nm:finaloutput_elapsed_time>
       </nm:post_process_times>
      </nm:problem>
     </nm:nonmem>
     <nm:stop_datetime>2019-08-23T20:52:44.955</nm:stop_datetime>
     <nm:total_cputime>0.101</nm:total_cputime>
    </nm:output>
   </so>
  </job>
  <job>
   <do>cat /opt/NONMEM/nm74/nmqual/log.xml</do>
   <so>
    <log>
     <logged on="install">
      <config>
       <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
       <alias id="folder">/mnt/nm743CD</alias>
       <alias id="target">/opt/NONMEM/nm74</alias>
       <alias id="origin">/mnt/nmqual-8.4.0</alias>
       <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
       <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
       <!--The meta interface groups commands that collect metadata.-->
       <do on="meta">pwd</do>
       <do on="meta">date</do>
       <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
       <do on="meta">echo $SHELL</do>
       <do on="meta">echo $USER</do>
       <do on="meta">echo $PATH</do>
       <do on="meta">head -n 5 target/util/nmfe74</do>
       <do on="meta">which ifort</do>
       <!--The 'install' interface installs NONMEM.-->
       <do on="install">date</do>
       <do on="install">rm -rf origin/temp</do>
       <do on="install">mkdir origin/temp</do>
       <do on="install">cp -r folder/* origin/temp</do>
       <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
       <!--alters compile options in setup73-->
       <do on="install">rm -rf target</do>
       <do on="install">mkdir target</do>
       <do on="install" in="origin/temp">pwd</do>
       <do on="install" in="origin/temp">ifort --version</do>
       <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target ifort y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
       <do on="install">mkdir target/nmqual</do>
       <do on="install">mkdir target/nmqual/doc</do>
       <do on="install">cp $0 target/nmqual</do>
       <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
       <do on="install">cp -r origin/con target/nmqual</do>
       <!--support for processing xml docs-->
       <do on="install">cp -r origin/csv target/nmqual</do>
       <!--support for processing csv docs-->
       <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
       <!--reference modeling results-->
       <do on="install">cp -r origin/psn target/nmqual</do>
       <!--support for psn qualification-->
       <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">rm -rf origin/temp</do>
       <do on="install">cp -r origin/test target/nmqual</do>
       <!--supports control tests-->
       <do on="install">chmod 0777 target/license/nonmem.lic</do>
       <!--enable overwriting-->
       <do on="install">cp unlock target/license/nonmem.lic</do>
       <!--replace expired license-->
       <do on="install">cp mpicha target/mpi/mpi_lini</do>
       <!--replace default mpich archive-->
       <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
       <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
       <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
       <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74.diff</do>
       <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74.diff</do>
       <do on="install" as="xml">perl $0 $_0 meta</do>
       <to on="install">target/nmqual/log.xml</to>
       <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
       <!--Run directory and run name are required arguments.-->
       <do on="basic" as="xml">perl $0 $_0 meta</do>
       <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
       <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="basic" as="xml">cat target/nmqual/log.xml</do>
       <to on="basic">$_1/$_2.log.xml</to>
       <!--The 'run' interface expects a leading compile/execute argument.-->
       <do on="run" as="xml">perl $0 $_0 meta</do>
       <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
       <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="run" as="xml">cat target/nmqual/log.xml</do>
       <to on="run">$_2/$_3.log.xml</to>
       <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
       <do on="para" as="xml">perl $0 $_0 meta</do>
       <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
       <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="para" as="xml">cat target/nmqual/log.xml</do>
       <to on="para">$_2/$_3.log.xml</to>
       <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
       <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
       <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
       <!--The 'qualify' interface runs a full suite of qualification tests.-->
       <do on="qualify" as="xml">perl $0 $_0 meta</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
       <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
       <to on="qualify">$_1</to>
       <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
       <do on="regress" as="xml">perl $0 $_0 meta</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="regress" as="xml">cat target/nmqual/log.xml</do>
       <to on="regress">$_1</to>
       <!--The 'psntest' interface runs PsN control tests.-->
       <do on="psntest" as="xml">perl $0 $_0 meta</do>
       <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
       <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
       <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
       <to on="psntest">$_1</to>
       <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
       <do on="accept">echo $_</do>
       <to on="accept">$0</to>
      </config>
      <job>
       <do>date</do>
       <so>Fri Jun 29 15:07:22 UTC 2018</so>
      </job>
      <job>
       <do>rm -rf /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do>mkdir /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nm743CD/* /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0">patch -p0 temp/SETUP74 nix/setup74.diff</do>
       <so>patching file temp/SETUP74</so>
      </job>
      <job>
       <do>rm -rf /opt/NONMEM/nm74</do>
       <so/>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm74</do>
       <so/>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0/temp">pwd</do>
       <so>/mnt/nmqual-8.4.0/temp</so>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0/temp">ifort --version</do>
       <so>ifort (IFORT) 12.0.4 20110427
          Copyright (C) 1985-2011 Intel Corporation.  All rights reserved.
          </so>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0/temp">/bin/bash SETUP74 /mnt/nmqual-8.4.0/temp /opt/NONMEM/nm74 ifort y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
       <so>NONMEM 7.4.3 INSTALLATION UTILITY - UNIX Bourne-Again SHell version
          For instructions, see readme_743.pdf on the CD or NONMEM installer directory
           
          SETUP74 /mnt/nmqual-8.4.0/temp /opt/NONMEM/nm74 ifort y ar same rec q unzip nonmem74e.zip nonmem74r.zip
          CD-ROM drive is /mnt/nmqual-8.4.0/temp
          NONMEM 7.4 directory is /opt/NONMEM/nm74
          Command for FORTRAN compiles is ifort
          Optimization for Fortran compiles is y
          Command to build NONMEM archive is ar
          Sizes is same (SIZES.f90 is always used)
          Recompile is rec
           All binaries will be recompiled
          Interactive is q
          Unzip program is unzip
          Encrypted source file is nonmem74e.zip
          Unencrypted file is nonmem74r.zip
           
          To learn how to override the defaults, enter
          % SETUP74 help
           
          directory /opt/NONMEM/nm74
          Step 1a. Copy files from /mnt/nmqual-8.4.0/temp to /opt/NONMEM/nm74
          Step 1b. Copy files from /mnt/nmqual-8.4.0/temp/NONMEM_7.4.3 to /opt/NONMEM/nm74
           
          Installing NONMEM 7.4.3 (Enter Ctrl-C to interrupt) ...
          Step 2a. Make sub-directories of /opt/NONMEM/nm74
          Extract rest of files
          Choosing platform-dependent files ...
          os is Linux
          cpu is x86_64
            Will use install_Linux
          Compiler is ifort
            Will use util/finish_Linux_ifort
          
           
          === Checking compiler
          Version of ifort is:
           
          ===
          the compiler options are -fp-model strict -Gs -nologo -nbs -w
          Copying NONMEM license file nonmem.lic to
          /opt/NONMEM/nm74/license/nonmem.lic
          Warning: the license may be expired or may expire soon.
          When this happens, NONMEM runs will fail.
          If you have a new license file from IDS, you may stop, replace
          it and restart SETUP74. Otherwise, allow NONMEM installation
          to finish at this time.
          Obtain a new license file from IDS (IDSSOFTWARE@iconplc.com)
          as as soon as possible and replace
          /opt/NONMEM/nm74/license/nonmem.lic
           
          Changes to License file, resource/SIZES.f90 and other resource
          files may be made here.
          Step 6. Compile resource files
          Compile of resource files was successful.
          resource directory has been compiled
          Step 9. Compile all remaining source files
          This will take a long time.
          See file /opt/NONMEM/nm74/progress.txt for compiler progress
          Step 10. Build NONMEM archive nm/nonmem.a
          Step 13. Create shell script util/nmfe74
          finished nmfe74
          Step 14. Create directory run
          run contains the following files:
          nmfe74 CONTROL3 CONTROL5 DATA3 THEOPP REPORT5IDS.txt
          run contains additional files
           
          Installation of NONMEM 7.4.3 is finished.
          For future reference, the command has been saved in file SETUP.TXT
           
          Please review /opt/NONMEM/nm74/compilemsgs.txt
                        /opt/NONMEM/nm74/finishmsgs.txt
          Ignore warnings. Report error messages.
           
          Help and html files and Users Guides will be installed.
          Step 15. Install NONMEM Users Guide files in /opt/NONMEM/nm74/guides
          Unzipping guides.zip ...
          To use the NONMEM Users Guides,
            open pdf files in /opt/NONMEM/nm74/guides using Adobe Reader.
          Step 16. Install On-line help files in /opt/NONMEM/nm74/help
          Unzipping help.zip ...
          For online help, enter (e.g.)
            cd /opt/NONMEM/nm74/help
            ./nmhelp advan2
          Step 17. Install HTML files in /opt/NONMEM/nm74/html (this may take a while) ...
          Unzipping html.zip ...
          For online help HTML files,
            open /opt/NONMEM/nm74/index.html in web browser
           
          Do you want to test the installation?
          Testing the installation. Commands are
              cd /opt/NONMEM/nm74/run
              ./nmfe74 CONTROL5 REPORT5.txt -prdefault
          If the run is successful, file REPORT5.txt will be created.
           
          Starting NMTRAN
            
           WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
                       
           (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
                       
           (WARNING  43) THE $PK BLOCK REQUESTS "CALL ONCE PER INDIVIDUAL RECORD", BUT
           DATA ITEMS ARE USED IN THE $PK BLOCK. VALUES OF THESE DATA ITEMS
           SUBSEQUENT TO THOSE FROM THE FIRST EVENT RECORD WILL BE IGNORED.  IF THIS
           IS NOT APPROPRIATE, THE CALL DATA ITEM CAN BE USED TO OBTAIN ADDITIONAL
           CALLS, OR $PK'S CALLING PROTOCOL SHOULD BE CHANGED.
          Building NONMEM Executable
          Starting nonmem execution ...
          License Registered to: Temporary License for Installing NONMEM 7.4.3
          Expiration Date:    30 MAR 2018
          Current Date:       29 JUN 2018
           
            **** NONMEM LICENSE HAS EXPIRED ****
            ****     NONMEM TERMINATING     ****
            **** CONTACT idssoftware@iconplc.com FOR RENEWAL ****
           
          Done with nonmem execution
          Nonmem executable was created but did not run successfully.
          This may be because the license is expired.
          Obtain a new license file from IDS (IDSSOFTWARE@iconplc.com)
          and replace
          /opt/NONMEM/nm74/license/nonmem.lic</so>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm74/nmqual</do>
       <so/>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm74/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp autolog.pl /opt/NONMEM/nm74/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/con /opt/NONMEM/nm74/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/csv /opt/NONMEM/nm74/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.4.0/doc/nix/* /opt/NONMEM/nm74/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/psn /opt/NONMEM/nm74/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.4.0/nix/setup74.diff /opt/NONMEM/nm74/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.4.0/temp/SETUP74 /opt/NONMEM/nm74/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>rm -rf /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/test /opt/NONMEM/nm74/nmqual</do>
       <so/>
      </job>
      <job>
       <do>chmod 0777 /opt/NONMEM/nm74/license/nonmem.lic</do>
       <so/>
      </job>
      <job>
       <do>cp /etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic /opt/NONMEM/nm74/license/nonmem.lic</do>
       <so/>
      </job>
      <job>
       <do>cp /usr/local/mpich3/lib/libmpich.a /opt/NONMEM/nm74/mpi/mpi_lini</do>
       <so/>
      </job>
      <job>
       <do>cp /opt/NONMEM/nm74/util/nmfe74 /opt/NONMEM/nm74/util/nmfe74.old</do>
       <so/>
      </job>
      <job>
       <do>cp /opt/NONMEM/nm74/util/nmfe74 /opt/NONMEM/nm74/run/nmfe74.old</do>
       <so/>
      </job>
      <job>
       <do>patch -p0 -R /opt/NONMEM/nm74/util/nmfe74 nix/nmfe74.diff</do>
       <so>patching file /opt/NONMEM/nm74/util/nmfe74</so>
      </job>
      <job>
       <do>patch -p0 -R /opt/NONMEM/nm74/run/nmfe74 nix/nmfe74.diff</do>
       <so>patching file /opt/NONMEM/nm74/run/nmfe74</so>
      </job>
      <job>
       <do>perl autolog.pl nix/nm74.xml meta</do>
       <so>
        <log>
         <logged on="meta">
          <config>
           <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
           <alias id="folder">/mnt/nm743CD</alias>
           <alias id="target">/opt/NONMEM/nm74</alias>
           <alias id="origin">/mnt/nmqual-8.4.0</alias>
           <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
           <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
           <!--The meta interface groups commands that collect metadata.-->
           <do on="meta">pwd</do>
           <do on="meta">date</do>
           <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
           <do on="meta">echo $SHELL</do>
           <do on="meta">echo $USER</do>
           <do on="meta">echo $PATH</do>
           <do on="meta">head -n 5 target/util/nmfe74</do>
           <do on="meta">which ifort</do>
           <!--The 'install' interface installs NONMEM.-->
           <do on="install">date</do>
           <do on="install">rm -rf origin/temp</do>
           <do on="install">mkdir origin/temp</do>
           <do on="install">cp -r folder/* origin/temp</do>
           <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
           <!--alters compile options in setup73-->
           <do on="install">rm -rf target</do>
           <do on="install">mkdir target</do>
           <do on="install" in="origin/temp">pwd</do>
           <do on="install" in="origin/temp">ifort --version</do>
           <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target ifort y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
           <do on="install">mkdir target/nmqual</do>
           <do on="install">mkdir target/nmqual/doc</do>
           <do on="install">cp $0 target/nmqual</do>
           <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
           <do on="install">cp -r origin/con target/nmqual</do>
           <!--support for processing xml docs-->
           <do on="install">cp -r origin/csv target/nmqual</do>
           <!--support for processing csv docs-->
           <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
           <!--reference modeling results-->
           <do on="install">cp -r origin/psn target/nmqual</do>
           <!--support for psn qualification-->
           <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
           <!--keep for archival purposes-->
           <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
           <!--keep for archival purposes-->
           <do on="install">rm -rf origin/temp</do>
           <do on="install">cp -r origin/test target/nmqual</do>
           <!--supports control tests-->
           <do on="install">chmod 0777 target/license/nonmem.lic</do>
           <!--enable overwriting-->
           <do on="install">cp unlock target/license/nonmem.lic</do>
           <!--replace expired license-->
           <do on="install">cp mpicha target/mpi/mpi_lini</do>
           <!--replace default mpich archive-->
           <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
           <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
           <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
           <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74.diff</do>
           <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74.diff</do>
           <do on="install" as="xml">perl $0 $_0 meta</do>
           <to on="install">target/nmqual/log.xml</to>
           <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
           <!--Run directory and run name are required arguments.-->
           <do on="basic" as="xml">perl $0 $_0 meta</do>
           <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
           <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="basic" as="xml">cat target/nmqual/log.xml</do>
           <to on="basic">$_1/$_2.log.xml</to>
           <!--The 'run' interface expects a leading compile/execute argument.-->
           <do on="run" as="xml">perl $0 $_0 meta</do>
           <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
           <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="run" as="xml">cat target/nmqual/log.xml</do>
           <to on="run">$_2/$_3.log.xml</to>
           <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
           <do on="para" as="xml">perl $0 $_0 meta</do>
           <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
           <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="para" as="xml">cat target/nmqual/log.xml</do>
           <to on="para">$_2/$_3.log.xml</to>
           <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
           <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
           <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
           <!--The 'qualify' interface runs a full suite of qualification tests.-->
           <do on="qualify" as="xml">perl $0 $_0 meta</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
           <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
           <to on="qualify">$_1</to>
           <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
           <do on="regress" as="xml">perl $0 $_0 meta</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
           <do on="regress" as="xml">cat target/nmqual/log.xml</do>
           <to on="regress">$_1</to>
           <!--The 'psntest' interface runs PsN control tests.-->
           <do on="psntest" as="xml">perl $0 $_0 meta</do>
           <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
           <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
           <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
           <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
           <to on="psntest">$_1</to>
           <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
           <do on="accept">echo $_</do>
           <to on="accept">$0</to>
          </config>
          <job>
           <do>pwd</do>
           <so>/mnt/nmqual-8.4.0</so>
          </job>
          <job>
           <do>date</do>
           <so>Fri Jun 29 15:11:45 UTC 2018</so>
          </job>
          <job>
           <do>perl -e 'use POSIX; print join qq(,),uname'</do>
           <so>Linux,ip-10-0-0-42,3.13.0-93-generic,#140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016,x86_64</so>
          </job>
          <job>
           <do>echo $SHELL</do>
           <so>/bin/bash</so>
          </job>
          <job>
           <do>echo $USER</do>
           <so>root</so>
          </job>
          <job>
           <do>echo $PATH</do>
           <so>/opt/intel/bin/intel64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/chef/embedded/bin:/opt/chef/embedded/bin:/opt/intel/mpirt/bin/intel64</so>
          </job>
          <job>
           <do>head -n 5 /opt/NONMEM/nm74/util/nmfe74</do>
           <so>#!/bin/bash
                     dir=/opt/NONMEM/nm74
                     f=ifort
                     o=' -fp-model strict -Gs -nologo -nbs -w '
                     opstat=' -static '</so>
          </job>
          <job>
           <do>which ifort</do>
           <so>/opt/intel/bin/intel64/ifort</so>
          </job>
         </logged>
        </log>
       </so>
      </job>
     </logged>
    </log>
   </so>
  </job>
 </logged>
</log>
